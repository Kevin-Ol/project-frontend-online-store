{"version":3,"sources":["components/CheckoutInput.js","pages/Checkout.js","components/Form.js","components/ShoppingIcon.js","components/Evaluation.js","services/storage.js","pages/Details.js","services/api.js","components/Categories.js","components/ProductCard.js","pages/Main.js","pages/ShoppingCart.js","pages/NotFound.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["CheckoutInput","this","props","placeholder","name","onChange","value","type","htmlFor","data-testid","id","Component","inputs","Checkout","handleChange","e","target","setState","state","fullname","email","cpf","phone","cep","address","sucess","bind","finishBuy","className","map","field","key","onClick","initialState","rating","comment","Form","onSubmitForm","required","min","max","cols","rows","ShoppingIcon","src","alt","Evaluation","addItemToCart","product","currentCart","JSON","parse","localStorage","getItem","futureCart","some","item","quantity","available_quantity","setItem","stringify","getTotalItems","reduce","acc","cur","Details","total","storage","evaluations","addAvaliation","cart","prevState","location","title","price","thumbnail","shipping","to","toFixed","free_shipping","index","URL_CATEG","URL_QUERY","URL_PRODS","myObject","method","headers","a","fetch","res","json","cat","getProductsFromCategoryAndQuery","categoryId","query","resHead","response","Categories","categories","loading","api","then","category","ProductCard","updateTotal","pathname","Main","prodList","render","isEmpty","handleChangeCategory","handleChangeInput","buttonLogic","products","results","number","prod","renderParag","renderList","ShoppingCart","items","removeItemFromCart","addItemFromCart","deleteItemFromCart","filter","getTotal","NotFound","Header","App","basename","exact","path","component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wUA8BeA,E,4JA1Bb,WACE,MAAqDC,KAAKC,MAAlDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,MAAOC,EAA5C,EAA4CA,KAC5C,OACE,2BAAOC,QAAUJ,GACf,2BACEA,KAAOA,EACPK,cAAA,mBAA0BL,GAC1BD,YAAcA,EACdI,KAAOA,EACPD,MAAQA,EACRI,GAAKN,EACLC,SAAWA,S,GAZOM,aCAtBC,EAAS,CACb,CACET,YAAa,gBACbC,KAAM,WACNG,KAAM,QAGR,CACEJ,YAAa,QACbC,KAAM,QACNG,KAAM,QAGR,CACEJ,YAAa,MACbC,KAAM,MACNG,KAAM,QAGR,CACEJ,YAAa,WACbC,KAAM,QACNG,KAAM,QAGR,CACEJ,YAAa,MACbC,KAAM,MACNG,KAAM,QAER,CACEJ,YAAa,cACbC,KAAM,UACNG,KAAM,SAyDKM,E,kDApDb,aAAe,IAAD,8BACZ,gBAeFC,aAAe,SAACC,GACd,MAAwBA,EAAEC,OAAlBZ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MACd,EAAKW,SAAL,eAAiBb,EAAOE,KAhBxB,EAAKY,MAAQ,CACXC,SAAU,GACVC,MAAO,GACPC,IAAK,GACLC,MAAO,GACPC,IAAK,GACLC,QAAS,GACTC,QAAQ,GAGV,EAAKX,aAAe,EAAKA,aAAaY,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAbL,E,6CAqBd,WACEzB,KAAKgB,SAAS,CAAEQ,QAAQ,M,oBAG1B,WAAU,IAAD,OACCP,EAAUjB,KAAViB,MAGR,OAFmBA,EAAXO,OAGE,uBAAGG,UAAU,UAAb,gCAAqDV,EAAMC,SAA3D,KAIR,8BACE,0BAAMS,UAAU,YACZhB,EAAOiB,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,CACEC,IAAMD,EAAM1B,KACZD,YAAc2B,EAAM3B,YACpBC,KAAO0B,EAAM1B,KACbC,SAAW,EAAKS,aAChBR,MAAQY,EAAMY,EAAM1B,MACpBG,KAAOuB,EAAMvB,WAGnB,4BAAQA,KAAK,SAASqB,UAAU,aAAaI,QAAU/B,KAAK0B,WAA5D,kB,GA/CehB,a,OCrCjBsB,EAAe,CACnB7B,KAAM,GACN8B,OAAQ,EACRC,QAAS,IA4EIC,E,kDAxEb,aAAe,IAAD,8BACZ,gBAKFtB,aAAe,SAACC,GACd,MAAwBA,EAAEC,OAAlBZ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MACd,EAAKW,SAAL,eAAiBb,EAAOE,KARZ,EAWd+B,aAAe,YAEbL,EADoB,EAAK9B,MAAjB8B,SACA,EAAKd,OACb,EAAKD,SAAS,CACZb,KAAM,GACN8B,OAAQ,EACRC,QAAS,MAdX,EAAKjB,MAAQe,EAHD,E,0CAqBd,WACE,MAAkChC,KAAKiB,MAA/Bd,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,QACtB,OACE,0BAAMP,UAAU,gBACd,2BAAOpB,QAAQ,cAAf,SAGA,2BACED,KAAK,OACLH,KAAK,OACLE,MAAQF,EACRC,SAAWJ,KAAKa,aAChBJ,GAAG,aACH4B,UAAQ,IAEV,2BAAO9B,QAAQ,mBAAf,oBAGA,2BACED,KAAK,SACLH,KAAK,SACLE,MAAQ4B,EACRK,IAAI,IACJC,IAAI,IACJnC,SAAWJ,KAAKa,aAChBJ,GAAG,kBACH4B,UAAQ,IAEV,2BAAO9B,QAAQ,iBAAf,kBAGA,8BACEiC,KAAK,KACLC,KAAK,KACLnC,KAAK,OACLH,KAAK,UACLE,MAAQ6B,EACR9B,SAAWJ,KAAKa,aAChBJ,GAAG,gBACHD,cAAY,8BAEd,4BAAQF,KAAK,SAASqB,UAAU,YAAYI,QAAU/B,KAAKoC,cAA3D,gB,GA/DW1B,aCCJgC,E,4JAPb,WACE,OACE,yBAAKf,UAAU,qBAAqBgB,IAAI,4DAA4DC,IAAI,sC,GAHnFlC,aCmBZmC,E,4JAjBb,WACE,MAAkC7C,KAAKC,MAA/BE,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,QACtB,OACE,6BAASP,UAAU,cACjB,oCAAWxB,GACX,oCAAW8B,GACX,4CAAgBC,Q,GAPCxB,aCHZoC,EAAgB,SAACC,GAC5B,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aAChDC,EAAa,GACKL,EAAYM,MAAK,SAACC,GAAD,OAAUR,EAAQtC,KAAO8C,EAAK9C,OAEnEuC,EAAYpB,KAAI,SAAC2B,GACf,OAAIA,EAAK9C,KAAOsC,EAAQtC,IAAM8C,EAAKC,SAAWD,EAAKE,oBACjDF,EAAKC,UAAY,EACVD,GAEFA,KAETF,EAAU,YAAOL,KAEjBD,EAAQS,SAAW,EACnBH,EAAU,sBAAOL,GAAP,CAAoBD,KAEhCI,aAAaO,QAAQ,WAAYT,KAAKU,UAAUN,KAqBrCO,EAAgB,WAC3B,IAAMZ,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aACpD,OAAGJ,EACkBA,EAAYa,QAAO,SAACC,EAAKC,GAE1C,OADAD,GAAOC,EAAIP,WAEV,GAGE,GC6CMQ,E,kDAnFb,aAAe,IAAD,8BACZ,gBACK/C,MAAQ,CACXgD,MAAOC,IACPC,YAAa,IAGf,EAAKrB,cAAgB,EAAKA,cAAcrB,KAAnB,gBACrB,EAAK2C,cAAgB,EAAKA,cAAc3C,KAAnB,gBART,E,iDAWd,SAAcsB,GACZ,GAAII,aAAaC,QAAQ,YACvBc,EAAsBnB,OACjB,CACLA,EAAQS,SAAW,EACnB,IAAMa,EAAO,CAACtB,GACdI,aAAaO,QAAQ,WAAYT,KAAKU,UAAUU,IAElDrE,KAAKgB,SAAS,CAAEiD,MAAOC,Q,2BAGzB,SAAcjD,GACZjB,KAAKgB,UAAS,SAACsD,GAAD,MAAgB,CAAEH,YAAY,GAAD,mBAAMG,EAAUH,aAAhB,CAA6BlD,U,oBAG1E,WAAU,IAAD,OACsBA,EAAcjB,KAAnCC,MAASsE,SAAYtD,MACrBuD,EAAqCvD,EAArCuD,MAAOC,EAA8BxD,EAA9BwD,MAAOC,EAAuBzD,EAAvByD,UAAWC,EAAY1D,EAAZ0D,SACjC,EAA+B3E,KAAKiB,MAA5BgD,EAAR,EAAQA,MAAOE,EAAf,EAAeA,YAEf,OACE,iCACI,yBAAKxC,UAAU,aACb,kBAAC,IAAD,CACEiD,GAAG,iBACHpE,cAAY,wBAEZ,kBAAC,EAAD,OAEF,0BAAMA,cAAY,sBAAuByD,IAE7C,yBAAKtC,UAAU,mBACb,wBAAInB,cAAY,uBAAwBgE,GACxC,yBAAK5B,IAAI,oBAAoBD,IAAM+B,IACnC,6BACE,qDAAoBD,EAAMI,QAAQ,KACjCF,EAASG,eAAiB,0BAAMnD,UAAU,gBAAgBnB,cAAY,iBAA5C,oBAE7B,4BACEF,KAAK,SACLqB,UAAU,UACVnB,cAAY,6BACZuB,QAAU,kBAAM,EAAKe,cAAc7B,KAJrC,0BASF,kBAAC,EAAD,CAAMc,QAAU/B,KAAKoE,gBACnBD,EAAYvC,KAAI,WAA0BmD,GAA1B,IAAE5E,EAAF,EAAEA,KAAM8B,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAAhB,OAClB,kBAAC,EAAD,CACEJ,IAAMiD,EACN5E,KAAOA,EACP8B,OAASA,EACTC,QAAUA,Y,GAjEExB,a,yBCRhBsE,EAAY,oDACZC,EAAY,oDACZC,EAAY,0DACZC,EAAW,CACfC,OAAQ,MACRC,QAAS,CACP,cAAiB,yB,4CAId,8BAAAC,EAAA,sEACaC,MAAMP,EAAWG,GAD9B,cACCK,EADD,gBAEaA,EAAIC,OAFjB,cAECC,EAFD,yBAGEA,GAHF,4C,sBAMA,SAAeC,EAAtB,oC,4CAAO,WAA+CC,EAAYC,GAA3D,iBAAAP,EAAA,yDAEAM,IAAcC,EAFd,gCAGaN,MAAM,GAAD,OAAIN,GAAJ,OAAgBY,IAHlC,OAGHC,EAHG,kCAIMF,GAAeC,EAJrB,iCAKaN,MAAM,GAAD,OAAIL,GAAJ,OAAgBU,IALlC,OAKHE,EALG,gDAOaP,MAAM,GAAD,OAAIL,GAAJ,OAAgBU,EAAhB,cAAgCC,IAPlD,QAOHC,EAPG,gCASkBA,EAAQL,OAT1B,eASCM,EATD,yBAUEA,GAVF,6C,0BC8CQC,E,kDAzDb,WAAY/F,GAAQ,IAAD,8BACjB,cAAMA,IAEDgB,MAAQ,CACXgF,WAAY,GACZC,SAAS,GALM,E,qDASnB,WAAqB,IAAD,QDJf,WAAP,gCCKIC,GAAoBC,MAAK,SAACL,GACxB,EAAK/E,SAAS,CACZiF,WAAW,YAAKF,GAChBG,SAAS,S,oBAKf,WACE,MAAgClG,KAAKiB,MAA7BgF,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,QACZnE,EAAY/B,KAAKC,MAAjB8B,QAER,OAAImE,EACM,+BAAO,6CAGf,+BACE,4BAAQvE,UAAU,mBAAlB,cACA,wBAAIA,UAAU,cACVsE,EAAWrE,KAAI,SAACyE,GAAD,OACf,wBACEvE,IAAMuE,EAAS5F,IAEf,2BACEF,QAAU8F,EAASlG,KACnBK,cAAY,YAEZ,2BACEF,KAAK,QACLG,GAAK4F,EAASlG,KACdA,KAAK,WACLE,MAAQgG,EAAS5F,GACjBsB,QAAUA,IAEVsE,EAASlG,gB,GA7CFO,aC8DV4F,E,kDA5Db,WAAYrG,GAAQ,IAAD,8BACjB,cAAMA,IACD6C,cAAgB,EAAKA,cAAcrB,KAAnB,gBAFJ,E,iDAKnB,SAAcsB,GACZ,GAAII,aAAaC,QAAQ,YACvBc,EAAsBnB,OACjB,CACLA,EAAQS,SAAW,EACnB,IAAMa,EAAO,CAACtB,GACdI,aAAaO,QAAQ,WAAYT,KAAKU,UAAUU,KAGlDkC,EADwBvG,KAAKC,MAArBsG,aACIrC,O,oBAGd,WAAU,IAAD,OACP,EASIlE,KAAKC,MARP8C,EADF,EACEA,QADF,IAEEA,QACEtC,EAHJ,EAGIA,GACA+D,EAJJ,EAIIA,MACAE,EALJ,EAKIA,UACAD,EANJ,EAMIA,MACAE,EAPJ,EAOIA,SAIJ,OACE,yBAAKhD,UAAU,eAAenB,cAAY,WACxC,kBAAC,IAAD,CACEA,cAAY,sBACZoE,GAAK,CACH4B,SAAS,YAAD,OAAc/F,GACtBQ,MAAO8B,IAGT,4BAAKyB,GACL,yBAAK7B,IAAM+B,EAAY9B,IAAI,sBAC3B,6BACE,qDACgB6B,EAAMI,QAAQ,KAE7BF,EAASG,eAAiB,0BAAMnD,UAAU,gBAAgBnB,cAAY,iBAA5C,qBAG/B,4BACEF,KAAK,SACLqB,UAAU,UACVnB,cAAY,sBACZuB,QAAU,kBAAM,EAAKe,cAAcC,KAJrC,8B,GAhDkBrC,aCsIX+F,E,kDAlIb,WAAYxG,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACX4E,MAAO,GACPQ,SAAU,GACVK,SAAU,GACVC,QAAQ,EACRC,SAAS,EACT3C,MAAOC,KAGT,EAAK2C,qBAAuB,EAAKA,qBAAqBpF,KAA1B,gBAC5B,EAAKqF,kBAAoB,EAAKA,kBAAkBrF,KAAvB,gBACzB,EAAKsF,YAAc,EAAKA,YAAYtF,KAAjB,gBACnB,EAAK8E,YAAc,EAAKA,YAAY9E,KAAjB,gBAdF,E,wDAiBnB,YAAkC,IAAD,OACvBpB,EADuB,EAAVU,OACbV,MACRL,KAAKgB,SAAS,CACZqF,SAAUhG,IACT,WACD,IAAQgG,EAAa,EAAKpF,MAAlBoF,SAEJA,GACFF,EAAoCE,GAAU,GAC3CD,MAAK,SAACZ,GACL,IAAMwB,EAAWxB,EAAIyB,QACrB,EAAKjG,SAAS,CACZ0F,SAAS,YAAKM,KACb,kBAAM,EAAKhG,SAAS,CACrB2F,QAAQ,EACRC,SAAS,e,+BAOrB,YAA+B,IACrBvG,EADoB,EAAVU,OACVV,MACRL,KAAKgB,SAAS,CACZ6E,MAAOxF,M,yBAIX,WAAe,IAAD,OACZ,EAA4BL,KAAKiB,MAAzB4E,EAAR,EAAQA,MAAOQ,EAAf,EAAeA,SACXR,GACFM,EAAoCE,EAAUR,GAC3CO,MAAK,SAACZ,GACL,IAAMwB,EAAWxB,EAAIyB,QACrB,EAAKjG,SAAS,CACZ0F,SAAS,YAAKM,GACdJ,SAAS,EACTD,QAAQ,S,yBAMlB,SAAYO,GACVlH,KAAKgB,SAAS,CAAEiD,MAAOiD,M,yBAGzB,WACE,OACE,uBAAG1G,cAAY,uBAAuBmB,UAAU,eAAhD,8D,wBAMJ,WAAc,IAAD,OACH+E,EAAa1G,KAAKiB,MAAlByF,SACR,OACE,yBAAK/E,UAAU,gBACd+E,EAAS9E,KACR,SAACuF,GAAD,OACE,kBAAC,EAAD,CACExF,UAAU,eACVG,IAAMqF,EAAK1G,GACXsC,QAAUoE,EACVZ,YAAc,EAAKA,oB,oBAO7B,WACE,MAA0CvG,KAAKiB,MAAvC0F,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,MAAOe,EAAvB,EAAuBA,QAAS3C,EAAhC,EAAgCA,MAEhC,OACE,oCACE,yBAAKtC,UAAU,WACb,kBAAC,EAAD,CAAYI,QAAU/B,KAAK6G,uBAC3B,yBAAKlF,UAAU,aACb,2BACEnB,cAAY,cACZN,YAAY,qBACZI,KAAK,OACLH,KAAK,QACLC,SAAWJ,KAAK8G,kBAChBzG,MAAQwF,IAEV,4BACErF,cAAY,eACZF,KAAK,SACLyB,QAAU/B,KAAK+G,aAHjB,cAQA,yBAAKpF,UAAU,aACf,kBAAC,IAAD,CAAMnB,cAAY,uBAAuBoE,GAAG,kBAC1C,kBAAC,EAAD,OAEF,0BAAMpE,cAAY,sBAAuByD,KAG7C,0BAAMtC,UAAU,aACZiF,GAAW5G,KAAKoH,cAChBT,GAAU3G,KAAKqH,mB,GA5HR3G,aCsIJ4G,E,kDAxIb,aAAe,IAAD,sBACZ,eAEA,IAAMjD,EAAOpB,KAAKC,MAAMC,aAAaC,QAAQ,aACzCmE,EAAQ,GAJA,OAKRlD,IACFkD,EAAK,YAAOlD,IAGd,EAAKpD,MAAQ,CACXsG,SAIF,EAAKC,mBAAqB,EAAKA,mBAAmB/F,KAAxB,gBAC1B,EAAKgG,gBAAkB,EAAKA,gBAAgBhG,KAArB,gBACvB,EAAKiG,mBAAqB,EAAKA,mBAAmBjG,KAAxB,gBAhBd,E,sDAmBd,SAAmBsB,INLa,SAACA,GACjC,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aACpDJ,EAAYpB,KAAI,SAAC2B,GACf,OAAIA,EAAK9C,KAAOsC,EAAQtC,IAAM8C,EAAKC,SAAW,GAC5CD,EAAKC,UAAY,EACVD,GAEFA,KAETJ,aAAaO,QAAQ,WAAYT,KAAKU,UAAUX,IMH9CkB,CAA2BnB,GAC3B,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aACpDpD,KAAKgB,SAAS,CAAEuG,MAAM,YAAKvE,O,6BAG7B,SAAgBD,GACdmB,EAAsBnB,GACtB,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aACpDpD,KAAKgB,SAAS,CAAEuG,MAAM,YAAKvE,O,gCAG7B,SAAmBD,INLa,SAACA,GACjC,IACMM,EADcJ,KAAKC,MAAMC,aAAaC,QAAQ,aACrBuE,QAAO,SAACpE,GAAD,OAAUA,EAAK9C,KAAOsC,EAAQtC,MACpE0C,aAAaO,QAAQ,WAAYT,KAAKU,UAAUN,IMG9Ca,CAA2BnB,GAC3B,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,aACpDpD,KAAKgB,SAAS,CAAEuG,MAAM,YAAKvE,O,sBAG7B,WAME,OALaC,KAAKC,MAAMC,aAAaC,QAAQ,aAC1BS,QAAO,SAACC,EAAD,GAExB,OADAA,GADsD,EAAtBN,SAAsB,EAAZiB,QAGzC,K,oBAIL,WAAU,IAAD,OACC8C,EAAUvH,KAAKiB,MAAfsG,MACFtD,EAAQjE,KAAK4H,WAEnB,OAAc,IAAV3D,EAEA,uBACEtC,UAAU,aACVnB,cAAY,+BAFd,+BAUF,0BAAMmB,UAAU,cACd,+BACE,+BACE,4BACE,oCACA,wCACA,wCACA,qCACA,wCACA,yCAGJ,+BACI4F,EAAM3F,KAAI,SAACmB,GAAD,OACV,wBAAIjB,IAAMiB,EAAQtC,IAChB,wBACED,cAAY,+BAEXuC,EAAQyB,OAEX,wBACEhE,cAAY,+BADd,OAGOuC,EAAQ0B,OAEf,4BACE,4BACEnE,KAAK,SACLE,cAAY,4BACZuB,QAAU,kBAAM,EAAKyF,mBAAmBzE,KAH1C,MAQF,wBAAIvC,cAAY,kCAAkCuC,EAAQS,UAC1D,4BACE,4BACElD,KAAK,SACLE,cAAY,4BACZuB,QAAU,kBAAM,EAAK0F,gBAAgB1E,KAHvC,MAQF,4BACE,4BACEzC,KAAK,SACLyB,QAAU,kBAAM,EAAK2F,mBAAmB3E,KAF1C,YAUV,uBAAGvC,cAAY,sBAAf,UAA6CyD,EAAMY,QAAQ,IAC3D,kBAAC,IAAD,CACED,GAAG,YACHpE,cAAY,qBAFd,yB,GAvHmBE,aCOZmH,E,4JATb,WACE,OACE,8BACE,+D,GAJenH,aCWRoH,E,4JATb,WACE,OACE,gCACE,4BAAI,kBAAC,IAAD,CAAMlD,GAAG,KAAT,+B,GAJSlE,aCwBNqH,E,4JAhBb,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,iCACtB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAYb,IAC/C,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,YAAYC,UAAYvH,IAC1C,kBAAC,IAAD,CAAOqH,OAAK,EAACC,KAAK,eAAeC,UAAYnE,IAC7C,kBAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,IAAIC,UAAY1B,IAClC,kBAAC,IAAD,CAAOyB,KAAK,IAAIC,UAAYN,U,GAVpBnH,aCEE0H,QACW,cAA7BC,OAAO9D,SAAS+D,UAEkB,UAA7BD,OAAO9D,SAAS+D,UAEhBD,OAAO9D,SAAS+D,SAASC,MAC1B,2DCbNC,IAAS7B,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAC2C,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e731a45.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass CheckoutInput extends Component {\n  render() {\n    const { placeholder, name, onChange, value, type } = this.props;\n    return (\n      <label htmlFor={ name }>\n        <input\n          name={ name }\n          data-testid={ `checkout-${name}` }\n          placeholder={ placeholder }\n          type={ type }\n          value={ value }\n          id={ name }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nCheckoutInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default CheckoutInput;\n","import React, { Component } from 'react';\nimport CheckoutInput from '../components/CheckoutInput';\n\nconst inputs = [\n  {\n    placeholder: 'Nome completo',\n    name: 'fullname',\n    type: 'text',\n  },\n\n  {\n    placeholder: 'Email',\n    name: 'email',\n    type: 'text',\n  },\n\n  {\n    placeholder: 'CPF',\n    name: 'cpf',\n    type: 'text',\n  },\n\n  {\n    placeholder: 'Telefone',\n    name: 'phone',\n    type: 'text',\n  },\n\n  {\n    placeholder: 'CEP',\n    name: 'cep',\n    type: 'text',\n  },\n  {\n    placeholder: 'Endereço',\n    name: 'address',\n    type: 'text',\n  },\n];\n\nclass Checkout extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fullname: '',\n      email: '',\n      cpf: '',\n      phone: '',\n      cep: '',\n      address: '',\n      sucess: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.finishBuy = this.finishBuy.bind(this);\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  finishBuy() {\n    this.setState({ sucess: true })\n  }\n\n  render() {\n    const { state } = this;\n    const { sucess } = state;\n\n    if (sucess) {\n      return (<p className=\"finish\">Obrigado por comprar conosco { state.fullname }!</p>)\n    }\n\n    return (\n      <main>\n        <form className=\"checkout\">\n          { inputs.map((field) => (\n            <CheckoutInput\n              key={ field.name }\n              placeholder={ field.placeholder }\n              name={ field.name }\n              onChange={ this.handleChange }\n              value={ state[field.name] }\n              type={ field.type }\n            />)) }\n        </form>\n        <button type=\"button\" className=\"finish-btn\" onClick={ this.finishBuy }>Finalizar</button>\n      </main>\n    );\n  }\n}\n\nexport default Checkout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst initialState = {\n  name: '',\n  rating: 0,\n  comment: '',\n};\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = initialState;\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  onSubmitForm = () => {\n    const { onClick } = this.props;\n    onClick(this.state)\n    this.setState({\n      name: '',\n      rating: 0,\n      comment: '',\n    });\n  }\n\n  render() {\n    const { name, rating, comment } = this.state;\n    return (\n      <form className=\"form-details\">\n        <label htmlFor=\"name-label\">\n          Nome:\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={ name }\n          onChange={ this.handleChange }\n          id=\"name-label\"\n          required\n        />\n        <label htmlFor=\"avaliator-label\">\n          Avaliação:\n        </label>\n        <input\n          type=\"number\"\n          name=\"rating\"\n          value={ rating }\n          min=\"1\"\n          max=\"5\"\n          onChange={ this.handleChange }\n          id=\"avaliator-label\"\n          required\n        />\n        <label htmlFor=\"comment-label\">\n          Comentário:\n        </label>\n        <textarea\n          cols=\"30\"\n          rows=\"10\"\n          type=\"text\"\n          name=\"comment\"\n          value={ comment }\n          onChange={ this.handleChange }\n          id=\"comment-label\"\n          data-testid=\"product-detail-evaluation\"\n        />\n        <button type=\"button\" className=\"submitBtn\" onClick={ this.onSubmitForm }> Avalie</button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default Form;\n","import React, { Component } from 'react';\n\nclass ShoppingIcon extends Component {\n  render() {\n    return (\n      <img className=\"shopping-cart-icon\" src=\"https://image.flaticon.com/icons/png/512/5008/5008618.png\" alt=\"imagem de carrinho de compras\" />\n    );\n  }\n}\n\nexport default ShoppingIcon;\n","import React, { Component } from 'react';\nimport Proptypes from 'prop-types';\n\nclass Evaluation extends Component {\n  render() {\n    const { name, rating, comment } = this.props;\n    return (\n      <section className=\"evaluation\">\n        <p>Nome: { name }</p>\n        <p>Nota: { rating }</p>\n        <p>Cometário: { comment }</p>\n      </section>\n    );\n  }\n}\n\nEvaluation.propTypes = {\n  name: Proptypes.string.isRequired,\n  rating: Proptypes.oneOfType([Proptypes.number, Proptypes.string]).isRequired,\n  comment: Proptypes.string.isRequired,\n};\nexport default Evaluation;\n","export const addItemToCart = (product) => {\n  const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n  let futureCart = [];\n  const alreadyInCart = currentCart.some((item) => product.id === item.id);\n  if (alreadyInCart) {\n    currentCart.map((item) => {\n      if (item.id === product.id && item.quantity < item.available_quantity) {\n        item.quantity += 1;\n        return item;\n      }\n      return item;\n    });\n    futureCart = [...currentCart];\n  } else {\n    product.quantity = 1;\n    futureCart = [...currentCart, product];\n  }\n  localStorage.setItem('carrinho', JSON.stringify(futureCart));\n};\n\nexport const removeItemFromCart = (product) => {\n  const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n  currentCart.map((item) => {\n    if (item.id === product.id && item.quantity > 0) {\n      item.quantity -= 1;\n      return item;\n    }\n    return item;\n  });\n  localStorage.setItem('carrinho', JSON.stringify(currentCart));\n};\n\nexport const deleteItemFromCart = (product) => {\n  const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n  const futureCart = currentCart.filter((item) => item.id !== product.id);\n  localStorage.setItem('carrinho', JSON.stringify(futureCart));\n};\n\nexport const getTotalItems = () => {\n  const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n  if(currentCart) {\n    const totalItems = currentCart.reduce((acc, cur) => {\n      acc += cur.quantity;\n      return acc;\n    }, 0);\n    return totalItems;\n  }\n  return 0;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Form from '../components/Form';\nimport ShoppingIcon from '../components/ShoppingIcon';\nimport Evaluation from '../components/Evaluation';\nimport * as storage from '../services/storage';\n\nclass Details extends Component {\n  constructor() {\n    super();\n    this.state = {\n      total: storage.getTotalItems(),\n      evaluations: [],\n    }\n\n    this.addItemToCart = this.addItemToCart.bind(this);\n    this.addAvaliation = this.addAvaliation.bind(this);\n  }\n\n  addItemToCart(product) {\n    if (localStorage.getItem('carrinho')) {\n      storage.addItemToCart(product)\n    } else {\n      product.quantity = 1;\n      const cart = [product];\n      localStorage.setItem('carrinho', JSON.stringify(cart));\n    }\n    this.setState({ total: storage.getTotalItems() });\n  }\n\n  addAvaliation(state) {\n    this.setState((prevState) => ({ evaluations: [...prevState.evaluations, state ]}))\n  }\n\n  render() {\n    const { props: { location: { state } } } = this;\n    const { title, price, thumbnail, shipping} = state;\n    const { total, evaluations } = this.state\n\n    return (\n      <section>\n          <div className=\"cart-icon\">\n            <Link\n              to=\"/shopping-cart\"\n              data-testid=\"shopping-cart-button\"\n            >\n              <ShoppingIcon />\n            </Link>\n            <span data-testid=\"shopping-cart-size\">{ total }</span>\n          </div>\n        <div className=\"product-details\">\n          <h3 data-testid=\"product-detail-name\">{ title }</h3>\n          <img alt=\"imagem do produto\" src={ thumbnail } />\n          <div>\n            <span>{`Preço: R$ ${price.toFixed(2)}`}</span>\n            {shipping.free_shipping && <span className=\"free-shipping\" data-testid=\"free-shipping\">Frete grátis</span>}\n          </div>\n          <button\n            type=\"button\"\n            className=\"add-btn\"\n            data-testid=\"product-detail-add-to-cart\"\n            onClick={ () => this.addItemToCart(state) }\n          >\n            Adicionar ao Carrinho\n          </button>\n        </div>\n        <Form onClick={ this.addAvaliation }/>\n        { evaluations.map(({name, rating, comment}, index) => (\n        <Evaluation \n          key={ index }\n          name={ name }\n          rating={ rating }\n          comment={ comment }\n        />  \n        )\n      )}\n      </section>\n    );\n  }\n}\n\nDetails.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      title: PropTypes.string,\n      price: PropTypes.number,\n      thumbnail: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Details;\n","const URL_CATEG = 'https://api.mercadolibre.com/sites/MLB/categories';\nconst URL_QUERY = 'https://api.mercadolibre.com/sites/MLB/search?q=$';\nconst URL_PRODS = 'https://api.mercadolibre.com/sites/MLB/search?category=';\nconst myObject = {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer $ACCESS_TOKEN',\n  }\n}\n\nexport async function getCategories() {\n  const res = await fetch(URL_CATEG, myObject);\n  const cat = await res.json();\n  return cat;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  let resHead;\n  if (!categoryId && query) {\n    resHead = await fetch(`${URL_QUERY}${query}`);\n  } else if (categoryId && !query) {\n    resHead = await fetch(`${URL_PRODS}${categoryId}`);\n  } else {\n    resHead = await fetch(`${URL_PRODS}${categoryId}&q=${query}`);\n  }\n  const response = await resHead.json();\n  return response;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../services/api';\n\nclass Categories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categories: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    api.getCategories().then((response) => {\n      this.setState({\n        categories: [...response],\n        loading: false,\n      });\n    });\n  }\n\n  render() {\n    const { categories, loading } = this.state;\n    const { onClick } = this.props;\n\n    if (loading) {\n      return (<aside><span>Carregando</span></aside>);\n    }\n    return (\n      <aside>\n        <button className=\"dropdown_button\">Categorias</button>\n        <ol className=\"categories\">\n          { categories.map((category) => (\n            <li\n              key={ category.id }\n            >\n              <label\n                htmlFor={ category.name }\n                data-testid=\"category\"\n              >\n                <input\n                  type=\"radio\"\n                  id={ category.name }\n                  name=\"category\"\n                  value={ category.id }\n                  onClick={ onClick }\n                />\n                { category.name }\n              </label>\n            </li>))}\n        </ol>\n      </aside>\n    );\n  }\n}\n\nCategories.propTypes = ({\n  onClick: PropTypes.func.isRequired,\n}).isRequired;\n\nexport default Categories;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as storage from '../services/storage';\n\nclass ProductCard extends Component {\n  constructor(props) {\n    super(props);\n    this.addItemToCart = this.addItemToCart.bind(this);\n  }\n\n  addItemToCart(product) {\n    if (localStorage.getItem('carrinho')) {\n      storage.addItemToCart(product)\n    } else {\n      product.quantity = 1;\n      const cart = [product];\n      localStorage.setItem('carrinho', JSON.stringify(cart));\n    }\n    const { updateTotal } = this.props;\n    updateTotal(storage.getTotalItems());\n  }\n\n  render() {\n    const {\n      product,\n      product: {\n        id,\n        title,\n        thumbnail,\n        price,\n        shipping,\n      },\n    } = this.props;\n\n    return (\n      <div className=\"product-card\" data-testid=\"product\">\n        <Link\n          data-testid=\"product-detail-link\"\n          to={ {\n            pathname: `/details/${id}`,\n            state: product,\n          } }\n        >\n          <h4>{title}</h4>\n          <img src={ thumbnail } alt=\"Product Thumbnail\" />\n          <div>\n            <span>\n              {`Preço: R$ ${price.toFixed(2)}`}\n            </span>\n            {shipping.free_shipping && <span className=\"free-shipping\" data-testid=\"free-shipping\">Frete grátis</span>}\n          </div>\n        </Link>\n        <button\n          type=\"button\"\n          className=\"add-btn\"\n          data-testid=\"product-add-to-cart\"\n          onClick={ () => this.addItemToCart(product) }\n        >\n          Adicionar ao Carrinho\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ProductCard;\n\nProductCard.propTypes = ({\n  description: PropTypes.string,\n  prodImg: PropTypes.string,\n  price: PropTypes.number,\n  shipping: PropTypes.string,\n}).isRequired;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Categories from '../components/Categories';\nimport * as api from '../services/api';\nimport * as storage from '../services/storage';\nimport ProductCard from '../components/ProductCard';\nimport ShoppingIcon from '../components/ShoppingIcon';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      category: '',\n      prodList: [],\n      render: false,\n      isEmpty: true,\n      total: storage.getTotalItems(),\n    };\n\n    this.handleChangeCategory = this.handleChangeCategory.bind(this);\n    this.handleChangeInput = this.handleChangeInput.bind(this);\n    this.buttonLogic = this.buttonLogic.bind(this);\n    this.updateTotal = this.updateTotal.bind(this);\n  }\n\n  handleChangeCategory({ target }) {\n    const { value } = target;\n    this.setState({\n      category: value,\n    }, () => {\n      const { category } = this.state;\n\n      if (category) {\n        api.getProductsFromCategoryAndQuery(category, false)\n          .then((res) => {\n            const products = res.results;\n            this.setState({\n              prodList: [...products],\n            }, () => this.setState({\n              render: true,\n              isEmpty: false,\n            }));\n          });\n      }\n    });\n  }\n\n  handleChangeInput({ target }) {\n    const { value } = target;\n    this.setState({\n      query: value,\n    });\n  }\n\n  buttonLogic() {\n    const { query, category } = this.state;\n    if (query) {\n      api.getProductsFromCategoryAndQuery(category, query)\n        .then((res) => {\n          const products = res.results;\n          this.setState({\n            prodList: [...products],\n            isEmpty: false,\n            render: true,\n          });\n        });\n    }\n  }\n\n  updateTotal(number) {\n    this.setState({ total: number });\n  }\n\n  renderParag() {\n    return (\n      <p data-testid=\"home-initial-message\" className=\"inital-text\">\n        Digite algum termo de pesquisa ou escolha uma categoria.\n      </p>\n    );\n  }\n\n  renderList() {\n    const { prodList } = this.state;\n    return (\n      <div className=\"product-list\">\n      {prodList.map(\n        (prod) => (\n          <ProductCard\n            className=\"product-card\"\n            key={ prod.id }\n            product={ prod }\n            updateTotal={ this.updateTotal }\n            />),\n      )}\n      </div>\n    );\n  }\n\n  render() {\n    const { render, query, isEmpty, total } = this.state;\n\n    return (\n      <>\n        <div className=\"nav-bar\">\n          <Categories onClick={ this.handleChangeCategory } />\n          <div className=\"searchbar\">\n            <input\n              data-testid=\"query-input\"\n              placeholder=\"Procure um produto\"\n              type=\"text\"\n              name=\"query\"\n              onChange={ this.handleChangeInput }\n              value={ query }\n              />\n            <button\n              data-testid=\"query-button\"\n              type=\"button\"\n              onClick={ this.buttonLogic }\n              >\n              Pesquisar\n            </button>\n          </div>\n            <div className=\"cart-icon\">\n            <Link data-testid=\"shopping-cart-button\" to=\"/shopping-cart\">\n              <ShoppingIcon />\n            </Link>\n            <span data-testid=\"shopping-cart-size\">{ total }</span>\n          </div>\n        </div>\n        <main className=\"main-page\">\n          { isEmpty && this.renderParag() }\n          { render && this.renderList() }\n        </main>\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as storage from '../services/storage';\n\nclass ShoppingCart extends Component {\n  constructor() {\n    super();\n\n    const cart = JSON.parse(localStorage.getItem('carrinho'));\n    let items = []\n    if (cart) {\n      items = [...cart]\n    }\n\n    this.state = {\n      items,\n    };\n    \n\n    this.removeItemFromCart = this.removeItemFromCart.bind(this);\n    this.addItemFromCart = this.addItemFromCart.bind(this);\n    this.deleteItemFromCart = this.deleteItemFromCart.bind(this);\n  }\n\n  removeItemFromCart(product) {\n    storage.removeItemFromCart(product);\n    const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n    this.setState({ items: [...currentCart] });\n  }\n\n  addItemFromCart(product) {\n    storage.addItemToCart(product);\n    const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n    this.setState({ items: [...currentCart] });\n  }\n\n  deleteItemFromCart(product) {\n    storage.deleteItemFromCart(product);\n    const currentCart = JSON.parse(localStorage.getItem('carrinho'));\n    this.setState({ items: [...currentCart] });\n  }\n\n  getTotal(){\n    const cart = JSON.parse(localStorage.getItem('carrinho'));\n    const total = cart.reduce((acc, { quantity, price }) => {\n      acc += quantity * price;\n      return acc;\n    }, 0)\n    return total;\n  }\n\n  render() {\n    const { items } = this.state;\n    const total = this.getTotal();\n\n    if (total === 0) {\n      return (\n        <p \n          className=\"empyt-cart\" \n          data-testid=\"shopping-cart-empty-message\"\n        >\n          Seu carrinho está vazio!\n        </p>\n        );\n    }\n\n    return (\n      <main className=\"cart-items\">\n        <table>\n          <thead>\n            <tr>\n              <th>Item</th>\n              <th>Preço</th>\n              <th>Diminuir</th>\n              <th>Total</th>\n              <th>Aumentar</th>\n              <th>Remover</th>\n            </tr>\n          </thead>\n          <tbody>\n            { items.map((product) => (\n              <tr key={ product.id }>\n                <td\n                  data-testid=\"shopping-cart-product-name \"\n                >\n                  {product.title}\n                </td>\n                <td\n                  data-testid=\"shopping-cart-product-name \"\n                >\n                  R$: {product.price}\n                </td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"product-decrease-quantity\"\n                    onClick={ () => this.removeItemFromCart(product) }\n                    >\n                    -\n                  </button>\n                </td>\n                <td data-testid=\"shopping-cart-product-quantity\">{product.quantity}</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"product-increase-quantity\"\n                    onClick={ () => this.addItemFromCart(product) }\n                    >\n                    +\n                  </button>\n                </td>\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={ () => this.deleteItemFromCart(product) }\n                    >\n                    X\n                  </button>\n                </td>\n              </tr>))}\n          </tbody>\n        </table>\n        <p data-testid=\"shopping-cart-size\">Total: { total.toFixed(2) }</p>\n        <Link\n          to=\"/checkout\"\n          data-testid=\"checkout-products\"\n        >\n          Finalizar compra\n        </Link>\n      </main>\n    );\n  }\n}\n\nShoppingCart.propTypes = ({\n  productList: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n}).isRequired;\n\nexport default ShoppingCart;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <main>\n        <p>Página não encontrada</p>\n      </main>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1><Link to=\"/\" >Frontend Online Store</Link></h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Checkout from './pages/Checkout';\nimport Details from './pages/Details';\nimport Main from './pages/Main';\nimport ShoppingCart from './pages/ShoppingCart';\nimport NotFound from './pages/NotFound';\nimport Header from './components/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename=\"project-frontend-online-store\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/shopping-cart\" component={ ShoppingCart } />\n          <Route exact path=\"/checkout\" component={ Checkout } />\n          <Route exact path=\"/details/:id\" component={ Details } />\n          <Route exact path=\"/\" component={ Main } />\n          <Route path=\"*\" component={ NotFound } />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}